(defun  greedyVsMinimax()

(setupgame)
(let ((count 0) (victor ()))
  (loop while (eql victor nil) do
        (progn 
          (incf count)
          (print "Player 1 turn!")
          (displayboard *theBoard*)
          (sleep 2)
          (setf *theMovelist* (aiDecision *theBoard* 0 0))
          (setf victor (isVictor 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 2 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          (if (eq victor nil)
              (progn
          (print "Player 2 turn!")
          (displayboard *theBoard*)
          (setf *theMovelist* (aiDecision *theBoard* 1 2))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 1 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
              (setf victor (isVictor 1))
            ))
          (print "turn: ")
          (print count)
          )
        )
  (displayboard *theBoard*)
  
  (if (= 0 victor)
      (print "Player 1 Won!!")
    (print "Player 2 Won!!")
    )
  )
)

(defun  greedyVsGreedy()

(setupgame)
(let ((count 0) (victor ()))
  (loop while (eql victor nil) do
        (progn 
          (incf count)
          (print "Player 1 turn!")
          (displayboard *theBoard*)
          (sleep 2)
          (setf *theMovelist* (aiDecision *theBoard* 0 0))
          (setf victor (isVictor 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 2 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          (if (eq victor nil)
              (progn
                (print "Player 2 turn!")               
                (displayboard *theBoard*)
                 (sleep 2)
          (setf *theMovelist* (aiDecision *theBoard* 1 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 1 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          
              (setf victor (isVictor 1))
          ))  
          (print "turn: ")
          (print count)
          )
        )
  (displayboard *theBoard*)
  
  (if (= 0 victor)
      (print "Player 1 Won!!")
    (print "Player 2 Won!!")
    )
  )
)

;;this file contains all the functions that are used to run the various simulations described in simple mainmenu

(defun  miniMaxVsMiniMax()

(setupgame)
(let ((count 0) (victor ()))
  (loop while (eql victor nil) do
        (progn 
          (incf count)
          (print "Player 1 turn!")
          (displayboard *theBoard*)
          (setf *theMovelist* (aiDecision *theBoard* 0 2))
          (setf victor (isVictor 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 2 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          (if (eq victor nil)
              (progn
          (print "Player 2 turn!")
          (displayboard *theBoard*)
          (setf *theMovelist* (aiDecision *theBoard* 1 2))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 1 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )

              (setf victor (isVictor 1))
            ))
          (print "turn: ")
          (print count)
          )
        )
  (displayboard *theBoard*)
  
  (if (= 0 victor)
      (print "Player 1 Won!!")
    (print "Player 2 Won!!")
    )
  )
)

(defun  simpleVsSimple()

(setupgame)
(let ((count 0) (victor ()))
  (loop while (eql victor nil) do
        (progn 
          (incf count)
          (print "Player 1 turn!")
          (displayboard *theBoard*)
          (sleep 2)
          (setf *theMovelist* (simple-ai *theBoard* 0))
          (setf victor (isVictor 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 2 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          (if (eq victor nil)
              (progn
          (print "Player 2 turn!")
                (displayboard *theBoard*)
                 (sleep 2)
          (setf *theMovelist* (simple-ai *theBoard* 1))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 1 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )

              (setf victor (isVictor 1))
            ))
          (print "turn: ")
          (print count)
          )
        )
  (displayboard *theBoard*)
  
  (if (= 0 victor)
      (print "Player 1 Won!!")
    (print "Player 2 Won!!")
    )
  )
)

(defun  simpleVsGreedy()

(setupgame)
(let ((count 0) (victor ()))
  (loop while (eql victor nil) do
        (progn 
          (incf count)
          (print "Player 1 turn!")
          (displayboard *theBoard*)
           (sleep 2)
          (setf *theMovelist* (simple-ai *theBoard* 0))
          (setf victor (isVictor 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 2 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
          (if (eq victor nil)
              (progn
          (print "Player 2 turn!")
                (displayboard *theBoard*)
                (sleep 2)
          (setf *theMovelist* (aiDecision *theBoard* 1 0))
          (if (equal *theMovelist* '(((7 7) (0 0))))
              (print "Player 1 won!!")
            (progn
              (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
              )
            )
              (setf victor (isVictor 1))
            ))
          (print "turn: ")
          (print count)
          )
        )
  (displayboard *theBoard*)
  
  (if (= 0 victor)
      (print "Player 1 Won!!")
    (print "Player 2 Won!!")
    )
  )
)


(defun  simpleVsMiniMax()

  (setupgame)
  (let ((count 0) (victor ()))
    (loop while (eql victor nil) do
          (progn 
            (incf count)
            (print "Player 1 turn!")
            (displayboard *theBoard*)
             (sleep 2)
            (setf *theMovelist* (simple-ai *theBoard* 0))
            (setf victor (isVictor 0))
            (if (equal *theMovelist* '(((7 7) (0 0))))
                (print "Player 2 won!!")
              (progn
                (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
                )
              )
            (if (eq victor nil)
                (progn
            (print "Player 2 turn!")
            (displayboard *theBoard*)
            (setf *theMovelist* (aiDecision *theBoard* 1 2))
            (if (equal *theMovelist* '(((7 7) (0 0))))
                (print "Player 1 won!!")
              (progn
                (updateboard (nth (nth 1 (nth 0 *theMovelist*)) (nth (nth 0 (nth 0 *theMovelist*)) *theBoard*)) *theBoard* *theMovelist*)
                )
              )
                (setf victor (isVictor 1))
              ))
            (print "turn: ")
            (print count)
            )
          )
    (displayboard *theBoard*)
    
    (if (= 0 victor)
        (print "Player 1 Won!!")
      (print "Player 2 Won!!")
      )
    )
  )